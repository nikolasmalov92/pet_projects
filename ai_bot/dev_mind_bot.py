import asyncio
import logging
from contextlib import suppress
from aiogram.enums import ParseMode
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ChatAction
from aiogram.filters import Command
from aiogram.types import Message
from openai import OpenAI
import os

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)-8s | %(name)s | %(message)s",
)

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

client = OpenAI(
    base_url="https://api.polza.ai/api/v1",
    api_key=OPENAI_API_KEY,
)

user_contexts = {}


async def typing_indicator_loop(chat_id: int, stop: asyncio.Event) -> None:
    """–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä '–ø–µ—á–∞—Ç–∞–µ—Ç' —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    Telegram —Å–∫—Ä—ã–≤–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —á–µ—Ä–µ–∑ ~5—Å, –ø–æ—ç—Ç–æ–º—É —Å–ª–∞—Ç—å –µ–≥–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏.
    """
    try:
        while not stop.is_set():
            await bot.send_chat_action(chat_id, ChatAction.TYPING)
            with suppress(asyncio.TimeoutError):
                await asyncio.wait_for(stop.wait(), timeout=4.0)

    except Exception as e:
        logging.warning(f"typing_indicator_loop: {e}")


async def send_long_text(dst_message: Message, text: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º –ø–æ –ª–∏–º–∏—Ç—É Telegram (4096)."""
    parse_mode = ParseMode.MARKDOWN

    if not text:
        return

    limit = 4000
    if len(text) <= limit:
        await dst_message.answer(text, parse_mode=parse_mode)
        return

    for i in range(0, len(text), limit):
        chunk = text[i: i + limit]
        await dst_message.answer(chunk, parse_mode=parse_mode)


@dp.message(Command("start"))
async def start_handler(message: Message):
    logging.info(f"user_name: {message.from_user.username}")
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø AI-–±–æ—Ç –Ω–∞ –±–∞–∑–µ T-pro-it-2.0.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å ‚Äî –æ—Ç–≤–µ—á—É!\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/help ‚Äî –ø–æ–º–æ—â—å",
        parse_mode=ParseMode.MARKDOWN
    )


@dp.message(Command("help"))
async def help_handler(message: Message):
    await message.answer(
        "ü§ñ –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:\n\n"
        "1) –ù–∞–ø–∏—à–∏ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å\n"
        "2) –Ø –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –µ–≥–æ –º–æ–¥–µ–ª—å—é T-pro-it-2.0\n"
        "3) –í–µ—Ä–Ω—É –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ –û–±—ä—è—Å–Ω–∏, —á—Ç–æ —Ç–∞–∫–æ–µ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ\n"
        "‚Ä¢ –ö–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ Python?\n"
        "‚Ä¢ –†–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç"
    )


@dp.message(F.text)
async def ai_response_handler(message: Message):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å—ã '–±–æ—Ç –¥—É–º–∞–µ—Ç‚Ä¶'."""
    status_msg = None
    typing_stop = asyncio.Event()
    typing_task = None
    user_id = message.from_user.id
    if user_id not in user_contexts:
        user_contexts[user_id] = []
    try:
        user_contexts[user_id].append({"role": "user", "content": message.text})
        status_msg = await message.answer("ü§î –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å...")
        typing_task = asyncio.create_task(typing_indicator_loop(message.chat.id, typing_stop))
        completion = client.chat.completions.create(
            model="t-tech/T-pro-it-2.0-FP8",
            messages=user_contexts[user_id],
            temperature=0.7,
        )
        ai_response = completion.choices[0].message.content or ""
        user_contexts[user_id].append({"role": "assistant", "content": ai_response})
        typing_stop.set()
        if typing_task:
            with suppress(Exception):
                await typing_task

        await send_long_text(message, ai_response)

        if status_msg:
            with suppress(Exception):
                await status_msg.delete()

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: %s", e)

        typing_stop.set()
        if typing_task:
            with suppress(Exception):
                await typing_task

        if status_msg:
            with suppress(Exception):
                await status_msg.edit_text(
                    "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ."
                )
        else:
            await message.answer(
                "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ."
            )


@dp.message()
async def unknown_handler(message: Message):
    await message.answer("ü§î –Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")


async def main():
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞‚Ä¶")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
