import json

from dotenv import load_dotenv
import os
import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
user_balances = {}


def load_data():
    global user_data
    if os.path.exists("user_data.json"):
        with open("user_data.json", "r", encoding='utf-8') as f:
            loaded_data = json.load(f)
            user_data = {int(k): v for k, v in loaded_data.items()}
    else:
        user_data = {}


def save_data():
    to_save = {str(k): v for k, v in user_data.items()}
    with open("user_data.json", "w", encoding='utf-8') as f:
        json.dump(to_save, f, ensure_ascii=False, indent=2)


def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å"), KeyboardButton(text="üîÑ –°–±—Ä–æ—Å")]],
        resize_keyboard=True,
        persistent=True
    )
    return keyboard


@dp.message(Command('start'))
async def start(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    first_name = message.from_user.first_name or username
    if user_id not in user_balances:
        user_balances[user_id] = 0

    await message.answer(
        f"üé∞ –ü—Ä–∏–≤–µ—Ç, {first_name}!"
        " –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–æ–∫–µ—Ä–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ üíº\n\n"
        "–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–æ –æ—Ç–º–µ—á–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à–∏ –∏ –ø—Ä–æ–∏–≥—Ä—ã—à–∏:  \n"
        "‚ûï +100 ‚Üí –¥–æ–±–∞–≤–∏—Ç –≤—ã–∏–≥—Ä—ã—à\n"
        "‚ûñ -50 ‚Üí –∑–∞–ø–∏—à–µ—Ç –ø—Ä–æ–∏–≥—Ä—ã—à \n\n"
        "üëá –£–ø—Ä–∞–≤–ª—è–π –±–∞–ª–∞–Ω—Å–æ–º —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ!",
        reply_markup=get_main_keyboard()
    )


@dp.message(lambda message: message.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
async def balance(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    first_name = message.from_user.first_name or username
    if user_id not in user_balances:
        user_balances[user_id] = 0

    current_balance = user_balances[user_id]
    if current_balance > 0:
        await message.answer(f"üí∞ {first_name}, –≤–∞—à –±–∞–ª–∞–Ω—Å: +{current_balance} üìà")
    elif current_balance < 0:
        await message.answer(f"üí∞ {first_name}, –≤–∞—à –±–∞–ª–∞–Ω—Å: {current_balance} üìâ")
    else:
        await message.answer(f"üí∞ {first_name}, –≤–∞—à –±–∞–ª–∞–Ω—Å: {current_balance} ‚öñÔ∏è")


@dp.message(lambda message: message.text == "üîÑ –°–±—Ä–æ—Å")
async def reset(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    first_name = message.from_user.first_name or username
    user_balances[user_id] = 0
    await message.answer(f"üîÑ {first_name}, –±–∞–ª–∞–Ω—Å —Å–±—Ä–æ—à–µ–Ω –¥–æ 0!")


@dp.message()
async def amount(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    first_name = message.from_user.first_name or username
    text = message.text.strip()

    if user_id not in user_balances:
        user_balances[user_id] = 0

    amount = float(text)
    user_balances[user_id] += amount
    new_balance = user_balances[user_id]
    try:
        if amount > 0:
            await message.answer(
                f"‚úÖ –ó–∞–ø–∏—Å–∞–ª –≤—ã–∏–≥—Ä—ã—à: +{amount}\n"
                f"üí∞ {first_name}, —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_balance:+.1f}"
            )
        else:
            await message.answer(
                f"‚úÖ –ó–∞–ø–∏—Å–∞–ª –ø—Ä–æ–∏–≥—Ä—ã—à: {amount}\n"
                f"üí∞ {first_name}, —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_balance:+.1f}"
            )
    except ValueError:
        await message.answer(
            "‚ùå  {username}, –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ: +100, -50 –∏–ª–∏ 75"
        )


async def main():
    load_data()
    logging.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
